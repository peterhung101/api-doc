FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# sample

Polls is a simple API allowing consumers to view polls and vote in them.

## Questions Collection [/questions]

### List All Questions [GET]

+ Response 200 (application/json)

        [
            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 2048
                    }, {
                        "choice": "Python",
                        "votes": 1024
                    }, {
                        "choice": "Objective-C",
                        "votes": 512
                    }, {
                        "choice": "Ruby",
                        "votes": 256
                    }
                ]
            }
        ]

### Create a New Question [POST]

You may create your own question using this action. It takes a JSON
object containing a question and a collection of answers in the
form of choices.

+ Request (application/json)

        {
            "question": "Favourite programming language?",
            "choices": [
                "Swift",
                "Python",
                "Objective-C",
                "Ruby"
            ]
        }

+ Response 201 (application/json)

    + Headers

            Location: /questions/2

    + Body

            {
                "question": "Favourite programming language?",
                "published_at": "2015-08-05T08:40:51.620Z",
                "choices": [
                    {
                        "choice": "Swift",
                        "votes": 0
                    }, {
                        "choice": "Python",
                        "votes": 0
                    }, {
                        "choice": "Objective-C",
                        "votes": 0
                    }, {
                        "choice": "Ruby",
                        "votes": 0
                    }
                ]
            }
            
## Users Collection [/users]

### List Users [GET]

+ Response 200 (application/json)
    + Attributes
        + data (array, fixed-type)
            + (user)
            + (user)
                + id: 33 (number)
                + name: Katie
            + (user)
                + moreDepartments (array, fixed-type)
                    + (department)
                        + id: 321 (number)
                        + department_name: Marketing
                    + (department)

## Users Collection 22 [/users2]

### List Users2 [GET]

+ Response 200 (application/json)
    + Attributes
        + data (array[user], fixed-type)


# Data Structures

## user
<!-- user object -->
- id: 23 (number) - user id
- name: test (string) - user name
- department (department) - Specific sale only price
- moreDepartments (array[department], fixed-type)
        
## department
<!-- department object -->
- id: 123 (number)
- department_name: IT (string)